(deflisten workspaces :initial "[]" "./scripts/get-workspaces.sh")
(deflisten current_workspace :initial "1" "./scripts/get-active-workspace.sh")
(defwidget workspaces []
  (eventbox :onscroll "./change-active-workspace.sh {} ${current_workspace}"
    (box :space-evenly false :class "workspaces-widget"
      (label :text "${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box
            :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            :visible {workspace.id == current_workspace || workspace.windows > 0}
            (label :text "${workspace.id}"))
          )
        )
      )
    )
  )

(deflisten window :initial "..." "./scripts/get-window-title.sh")

(defpoll timestr
  :interval "1s"
  :initial-value ""
  "date '+%H:%M'")

(defpoll datestr
  :interval "1m"
  :initial-value ""
  "date '+%A %B %d'")

(defpoll volume
  :interval "0.05s"
  "pactl get-sink-volume @DEFAULT_SINK@ | grep '%' | cut -d '/' -f 2 | cut -d '%' -f 1 | tr -d ' '")

(defpoll mute
  :interval "0.05s"
  "pactl get-sink-mute @DEFAULT_SINK@ | cut -d ':' -f 2 | tr -d ' '")

(defpoll battery-icon
  :interval "2s"
  :initial-value ""
  "./scripts/get-battery-icon.sh")

(defpoll ssid
  :interval "10s"
  "iwgetid -r")

(defvar timewidget-hover false)
(defvar batterywidget-hover false)
(defvar volumewidget-hover false)
(defvar statswidget-hover false)
(defvar netwidget-hover false)

(defwidget titlewidget []
    (label
     :class "title"
     :visible {window != ''}
     :text "${window}"))

(defwidget ramwidget []
    (label
     :class "hidden"
     :text " ${round(EWW_RAM.used_mem_perc, 1)}%  "))

(defwidget cpuwidget []
    (label
     :class "hidden"
     :text " ${round(EWW_CPU.avg, 1)}%  "))

(defwidget tempwidget []
    (label
     :class "temp shown"
     :text " ${EWW_TEMPS["CORETEMP_PACKAGE_ID_0"]}°"))

(defwidget netwidget []
    (hoverwidget
        :class "net"
        :onclick "nm-connection-editor &"
        :hover-var "netwidget-hover"
        :hover-cond netwidget-hover
        (label
         :class "net shown"
         :text "${strlength(ssid) == 0 ? 'No Connection' : ' ${ssid}'}")
        (label
            :class "net hidden"
            ;; :text "   ${round(EWW_NET.wlp2s0.up, 1)}%  "))
            ;; :style "padding-left: 5px; padding-right: 5px;"
            :text "${EWW_NET['wlan0']['NET_UP']} B  ${EWW_NET['wlan0']['NET_DOWN']} B ")))

(defwidget statswidget []
    (hoverwidget
        :class "stats"
        :onclick "kitty btm &"
        :hover-var "statswidget-hover"
        :hover-cond statswidget-hover
        (tempwidget)
        (box
         :orientation "h"
         :space-evenly false
         (cpuwidget)
         (ramwidget))))

(defwidget volumewidget []
    (hoverwidget
        :class "volume"
        :hover-var "volumewidget-hover"
        :hover-cond volumewidget-hover
        :onclick "exec pavucontrol"
        (label
         :class "shown"
         :text " ${mute == "yes" ? "muted" : "${volume}%"}")
        (metric
            :class "hidden"
            :label ""
            :value "${volume ?: 0}"
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")))

(defwidget batterywidget []
    (hoverwidget
        :class "battery"
        :hover-var "batterywidget-hover"
        :hover-cond batterywidget-hover
        (label
         :class "shown"
         :text "${battery-icon} ${EWW_BATTERY["BAT1"]["capacity"]}%")
        (label
         :class "hidden"
         :style "padding-left: 5px; padding-right: 5px;"
         :text "${EWW_BATTERY["BAT1"]["status"]}")))

(defwidget timewidget []
    (hoverwidget
        :class "time"
        :hover-var "timewidget-hover"
        :hover-cond timewidget-hover
        (label
         :class "shown"
         :text "${timestr}")
        (label
         :class "hidden"
         :text "  ${datestr}")))

(defwidget systraywidget []
    (systray
        :class "tray"
        :orientation "h"
        :icon-size 16
        :prepend-new true))

(defwidget metric [?class label value onchange]
  (box :orientation "h"
       :class "metric ${class}"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget hoverwidget [?class ?onclick hover-var hover-cond]
    (eventbox
        :onclick onclick
        :onhover "${EWW_EXECUTABLE} update ${hover-var}=true"
        :onhoverlost "${EWW_EXECUTABLE} update ${hover-var}=false"
        (box
            :class "hover-widget ${class}"
            :orientation "h"
            :halign "end"
            :height 26
            :space-evenly false
            :spacing 5
            (revealer
                :reveal hover-cond
                :transition "slideleft"
                (children :nth 1))
            (children :nth 0))))

(defwidget hoverwidgetright [?class ?onclick hover-var hover-cond]
    (eventbox
        :onclick onclick
        :onhover "${EWW_EXECUTABLE} update ${hover-var}=true"
        :onhoverlost "${EWW_EXECUTABLE} update ${hover-var}=false"
        (box
            :class "hover-widget ${class}"
            :orientation "h"
            :halign "end"
            :height 26
            :space-evenly false
            :spacing 5
            (children :nth 0)
            (revealer
                :reveal hover-cond
                :transition "slideright"
                (children :nth 1)))))

(defwidget barcontent []
    (centerbox
        (bar-left)
        (bar-center)
        (bar-right)))

(defwidget bar-left []
  (box
    :class "bar-left"
    :halign "start"
    :space-evenly false
    (workspaces)))

(defwidget bar-center []
  (box
    :class "bar-center"
    (titlewidget)))

(defwidget bar-right []
  (box
   :valign "center"
   :space-evenly false
   :halign "end"
   :class "bar-right"
   (systraywidget)
   (netwidget)
   (statswidget)
   (volumewidget)
   (batterywidget)
   (timewidget)))


(defwindow bar [monitor width]
    :monitor monitor
    :geometry (geometry :x "0%"
                        :y "8px"
                        :width "${width * 0.98}px"
                        :height "26px"
                        :anchor "top center")
    :stacking "bg"
    ;; :reserve (struts :distance "10px" :side "top")
    :windowtype "desktop"
    ;; :wm-ignore false
    ;; :focusable false
    :exclusive true
    (barcontent))

;; Use this window for a non-eww bar
;; (defwindow workspaceoverlay
;;     :monitor 0
;;     :geometry (geometry :x "0%"
;;                         :y "10px"
;;                         :width "35%"
;;                         :height "26px"
;;                         :anchor "top center")
;;     :stacking "fg"
;;     :reserve (struts :distance "40px" :side "top")
;;     :windowtype "dock"
;;     :wm-ignore true
;;     (workspaces))
